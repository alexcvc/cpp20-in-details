# add test cases
list(APPEND SOURCE_FILES
   abbreviatedFunctionTemplates.cpp
   aggregateInitialization.cpp
   allAnyNone.cpp
   bitField.cpp
   char8Str.cpp
   client.cpp
   client1.cpp
   client2.cpp
   client3.cpp
   clientTemplate.cpp
   comparisonOperator.cpp
   compileTimePredicate.cpp
   conceptClassTemplate.cpp
   conceptMemberFunction.cpp
   conceptsDefinitionEqual.cpp
   conceptsDefinitionOrdering.cpp
   conceptsIntegralVariations.cpp
   conceptsOverloading.cpp
   conceptsOverloadingFunctionTemplates.cpp
   conceptsSpecialization.cpp
   conditionallyConstructor.cpp
   consteval.cpp
   constevalSqr.cpp
   constexprConstinit.cpp
   constinitSqr.cpp
   designatedInitializer.cpp
   designatedInitializerNarrowingConversion.cpp
   designatedInitializersDefault.cpp
   enumUsing.cpp
   genericLambdaTemplate.cpp
   hello.cpp
   helloWorld.cpp
   helloWorld2.cpp
   implicitExplicitGenericConstructor.cpp
   lambdaCaptureThis.cpp
   lambdaUnevaluatedContext.cpp
   main.cpp
   mainSIOF1.cpp
   mainSIOF2.cpp
   mainSIOF3.cpp
   math.cpp
   math1.ixx
   math2.ixx
   mathImplementationUnit.cpp
   mathInterfaceUnit.ixx
   mathModule.ixx
   mathModule1.ixx
   mathModule2.ixx
   mathModuleClient.cpp
   mathModuleClient1.cpp
   mathModuleTempate1.ixx
   mathModuleTemplate.ixx
   mathPartition.ixx
   mathPartition1.ixx
   mathPartition2.ixx
   nestedRequirements.cpp
   nodiscard.cpp
   nodiscardString.cpp
   nonTypeTemplateParameter.cpp
   nonTypeTemplateParameterString.cpp
   placeholders.cpp
   rangeBasedForLoopInitializer.cpp
   regularSemiRegular.cpp
   requiresClause.cpp
   rewritingExpressions.cpp
   signedUnsignedIntegrals.cpp
   sourceSIOF1.cpp
   sourceSIOF2.cpp
   sourceSIOF3.cpp
   spaceship.cpp
   spaceshipPointer.cpp
   strongWeakPartial.cpp
   sumMain.cpp
   templateLambda.cpp
   templateLambdaVector.cpp
   threeWayComparison.cpp
   threeWayComparisonAtCompileTime.cpp
   threeWayComparisonForInt.cpp
   tooGeneric.cpp
   tooSpecific.cpp
   typeRequirements.cpp
   unevaluatedContext.cpp
   uniqueAddress.cpp
   userDefinedAutoGeneratedOperators.cpp
   virtualConstexpr.cpp
   withoutNodiscard.cpp
   world.cpp
)

foreach (SOURCE_PATH ${SOURCE_FILES})
   get_filename_component(TargetName ${SOURCE_PATH} NAME_WE)

   message(STATUS "Test application ${TargetName}")
   add_executable(${TargetName} ${SOURCE_PATH})

endforeach ()
